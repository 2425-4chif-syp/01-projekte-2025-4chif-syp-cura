services:
  postgres:
    image: postgres:16
    container_name: cura_postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: passme
      POSTGRES_DB: cura
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./testdata.sql:/docker-entrypoint-initdb.d/02-testdata.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d cura"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cura-network

  # Optional: pgAdmin f√ºr Web-basierte Datenbank-Verwaltung
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cura_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cura.at
      PGADMIN_DEFAULT_PASSWORD: passme
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cura-network

  # CURA Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: cura_backend
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "5257:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cura-network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  cura-network:
    driver: bridge
